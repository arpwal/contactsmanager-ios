// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios18.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ContactsManager
import BackgroundTasks
import Combine
import Contacts
@_exported import ContactsManager
import CryptoKit
import Foundation
import OSLog
import Observation
import Swift
import SwiftData
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import _SwiftData_SwiftUI
@_hasMissingDesignatedInitializers public class CNContactMapper {
  @objc deinit
}
public enum ContactsSchemaVersions {
  public static let v1: ContactsManager.SchemaVersion
  public static let v2: ContactsManager.SchemaVersion
  public static let v3: ContactsManager.SchemaVersion
  public static let v4: ContactsManager.SchemaVersion
  public static let v5: ContactsManager.SchemaVersion
}
public enum ContactsMigrationStages {
  public static let v1ToV2: ContactsManager.MigrationStage
  public static let v2ToV3: ContactsManager.MigrationStage
  public static let v3ToV4: ContactsManager.MigrationStage
  public static let v4ToV5: ContactsManager.MigrationStage
}
public struct ContactsMigrationPlan {
  public static let current: ContactsManager.SchemaMigrationPlan
}
extension ContactsManager.MigrationManager {
  public static var contacts: ContactsManager.MigrationManager {
    get
  }
  public static func contacts(databaseName: Swift.String, shouldHideDatabase: Swift.Bool = true) -> ContactsManager.MigrationManager
}
final public class MigrationManager {
  public init(migrationPlan: ContactsManager.SchemaMigrationPlan, userDefaults: Foundation.UserDefaults = .standard, versionKey: Swift.String = "com.contactsmanager.schema.version", databaseName: Swift.String = "ContactsManager.store", shouldHideDatabase: Swift.Bool = true)
  final public func createModelContainer() throws -> SwiftData.ModelContainer
  @objc deinit
}
public enum MigrationError : Foundation.LocalizedError {
  case invalidSchemaVersion(Swift.Int)
  case noMigrationPath(fromVersion: Swift.Int, toVersion: Swift.Int)
  case databaseCreationFailed(any Swift.Error)
  public var errorDescription: Swift.String? {
    get
  }
}
public struct SchemaMigrationCleanup {
  public static func cleanupAfterV4Migration(container: SwiftData.ModelContainer) async
  @_Concurrency.MainActor public static func getModelCounts(container: SwiftData.ModelContainer) -> Swift.String
}
public struct SchemaVersion {
  public let version: Swift.Int
  public let models: [any SwiftData.PersistentModel.Type]
  public init(version: Swift.Int, models: [any SwiftData.PersistentModel.Type])
}
public struct MigrationStage {
  public let fromVersion: Swift.Int
  public let toVersion: Swift.Int
  public let migrationHandler: @_Concurrency.MainActor (SwiftData.ModelContainer) async throws -> Swift.Void
  public init(fromVersion: Swift.Int, toVersion: Swift.Int, migrationHandler: @escaping @_Concurrency.MainActor (SwiftData.ModelContainer) async throws -> Swift.Void)
}
public struct SchemaMigrationPlan {
  public let schemaVersions: [ContactsManager.SchemaVersion]
  public let migrationStages: [ContactsManager.MigrationStage]
  public let currentVersion: Swift.Int
  public init(schemaVersions: [ContactsManager.SchemaVersion], migrationStages: [ContactsManager.MigrationStage], currentVersion: Swift.Int)
  public func migrationPath(fromVersion: Swift.Int, toVersion: Swift.Int) -> [ContactsManager.MigrationStage]
  public func schemaVersion(for version: Swift.Int) -> ContactsManager.SchemaVersion?
}
public let SECTIONNONAME: Swift.String
final public class Contact {
  final public var identifier: Swift.String {
    get
    set
  }
  final public var id: Swift.String {
    get
  }
  final public var contactType: Swift.Int {
    get
    set
  }
  final public var namePrefix: Swift.String? {
    get
    set
  }
  final public var givenName: Swift.String? {
    get
    set
  }
  final public var middleName: Swift.String? {
    get
    set
  }
  final public var familyName: Swift.String? {
    get
    set
  }
  final public var previousFamilyName: Swift.String? {
    get
    set
  }
  final public var nameSuffix: Swift.String? {
    get
    set
  }
  final public var nickname: Swift.String? {
    get
    set
  }
  final public var contactSection: Swift.String? {
    get
    set
  }
  final public var displayName: Swift.String? {
    get
    set
  }
  final public var organizationName: Swift.String? {
    get
    set
  }
  final public var departmentName: Swift.String? {
    get
    set
  }
  final public var jobTitle: Swift.String? {
    get
    set
  }
  final public var notes: Swift.String? {
    get
    set
  }
  final public var bio: Swift.String? {
    get
    set
  }
  final public var location: Swift.String? {
    get
    set
  }
  final public var imageUrl: Swift.String? {
    get
    set
  }
  final public var imageData: Foundation.Data? {
    get
    set
  }
  final public var thumbnailImageData: Foundation.Data? {
    get
    set
  }
  final public var imageDataAvailable: Swift.Bool {
    get
    set
  }
  final public var phoneNumbers: [ContactsManager.ContactPhoneNumber] {
    get
    set
  }
  final public var emailAddresses: [ContactsManager.ContactEmailAddress] {
    get
    set
  }
  final public var urlAddresses: [ContactsManager.ContactURLAddress] {
    get
    set
  }
  final public var socialProfiles: [ContactsManager.ContactSocial] {
    get
    set
  }
  final public var addresses: [ContactsManager.ContactAddress] {
    get
    set
  }
  final public var instantMessageAddresses: [ContactsManager.ContactInstantMessage] {
    get
    set
  }
  final public var relations: [ContactsManager.ContactRelation] {
    get
    set
  }
  final public var interests: [Swift.String] {
    get
    set
  }
  final public var avatars: [Swift.String] {
    get
    set
  }
  final public var birthday: Foundation.Date? {
    get
    set
  }
  final public var dates: [ContactsManager.ContactDate] {
    get
    set
  }
  final public var createdAt: Swift.Double {
    get
    set
  }
  final public var matchString: Swift.String? {
    get
    set
  }
  final public var isDeleted: Swift.Bool {
    get
    set
  }
  final public var parentContactId: Swift.String? {
    get
    set
  }
  final public var lastSyncedAt: Swift.Double? {
    get
    set
  }
  final public var dirtyTime: Swift.Double? {
    get
    set
  }
  final public var sourceId: Swift.String? {
    get
    set
  }
  public init(identifier: Swift.String = UUID().uuidString, firstName: Swift.String? = nil, lastName: Swift.String? = nil, sourceId: Swift.String? = nil)
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.Contact> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.Contact>)
  @objc deinit
}
extension ContactsManager.Contact : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.Contact {
  final public func updateDisplayInfo()
  final public func markAsDirty()
  final public func update(fromCNContact cnContact: Contacts.CNContact, markAsDirty: Swift.Bool = true)
}
extension ContactsManager.Contact {
  final public func setPhoneNumbers(_ numbers: [ContactsManager.ContactPhoneNumber])
  final public func setEmailAddresses(_ emails: [ContactsManager.ContactEmailAddress])
  final public func setUrlAddresses(_ urls: [ContactsManager.ContactURLAddress])
  final public func setSocialProfiles(_ profiles: [ContactsManager.ContactSocial])
  final public func setAddresses(_ addresses: [ContactsManager.ContactAddress])
  final public func setInstantMessageAddresses(_ ims: [ContactsManager.ContactInstantMessage])
  final public func setRelations(_ relations: [ContactsManager.ContactRelation])
  final public func setDates(_ dates: [ContactsManager.ContactDate])
}
extension ContactsManager.Contact {
  final public func updateNamePrefix(_ value: Swift.String?)
  final public func updateGivenName(_ value: Swift.String?)
  final public func updateMiddleName(_ value: Swift.String?)
  final public func updateFamilyName(_ value: Swift.String?)
  final public func updatePreviousFamilyName(_ value: Swift.String?)
  final public func updateNameSuffix(_ value: Swift.String?)
  final public func updateNickname(_ value: Swift.String?)
  final public func updateOrganizationName(_ value: Swift.String?)
  final public func updateDepartmentName(_ value: Swift.String?)
  final public func updateJobTitle(_ value: Swift.String?)
  final public func updateNotes(_ value: Swift.String?)
  final public func updateBio(_ value: Swift.String?)
  final public func updateLocation(_ value: Swift.String?)
  final public func updateBirthday(_ value: Foundation.Date?)
  final public func markAsDeleted()
  final public func markAsActive()
}
extension ContactsManager.Contact {
  final public func isEqual(to other: ContactsManager.Contact) -> Swift.Bool
}
extension ContactsManager.Contact {
  final public var displayInfo: Swift.String {
    get
  }
}
extension ContactsManager.Contact : SwiftData.PersistentModel {
  public typealias ID = Swift.String
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.Contact : Observation.Observable {
}
final public class ContactAddress : Swift.Comparable {
  final public var addressId: Swift.String {
    get
    set
  }
  final public var address1: Swift.String? {
    get
    set
  }
  final public var address2: Swift.String? {
    get
    set
  }
  final public var city: Swift.String? {
    get
    set
  }
  final public var county: Swift.String? {
    get
    set
  }
  final public var state: Swift.String? {
    get
    set
  }
  final public var country: Swift.String? {
    get
    set
  }
  final public var postalCode: Swift.String? {
    get
    set
  }
  final public var countryCode: Swift.String? {
    get
    set
  }
  final public var type: Swift.String? {
    get
    set
  }
  final public var emoji: Swift.String? {
    get
    set
  }
  final public var contact: ContactsManager.Contact? {
    get
    set
  }
  public init(contactId: Swift.String?, address1: Swift.String?, address2: Swift.String?, city: Swift.String?, county: Swift.String?, state: Swift.String?, country: Swift.String?, postalCode: Swift.String?, countryCode: Swift.String?, type: Swift.String?, emoji: Swift.String? = "", randomComponent: Swift.String? = nil)
  public static func < (lhs: ContactsManager.ContactAddress, rhs: ContactsManager.ContactAddress) -> Swift.Bool
  final public func display(separator: Swift.String = ", ") -> Swift.String
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.ContactAddress> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.ContactAddress>)
  @objc deinit
}
extension ContactsManager.ContactAddress : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.ContactAddress {
  public static func create(from item: Contacts.CNLabeledValue<Contacts.CNPostalAddress>, contactId: Swift.String?) -> ContactsManager.ContactAddress
}
extension ContactsManager.ContactAddress : SwiftData.PersistentModel {
  public typealias ID = SwiftData.PersistentIdentifier
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.ContactAddress : Observation.Observable {
}
final public class ContactDate : Swift.Codable {
  final public var id: Swift.String {
    get
    set
  }
  final public var contactId: Swift.String {
    get
    set
  }
  final public var label: Swift.String {
    get
    set
  }
  final public var date: Foundation.Date {
    get
    set
  }
  final public var isPrimary: Swift.Bool {
    get
    set
  }
  final public var randomComponent: Swift.String {
    get
    set
  }
  final public var contact: ContactsManager.Contact? {
    get
    set
  }
  public init(id: Swift.String = UUID().uuidString, contactId: Swift.String, label: Swift.String, date: Foundation.Date, isPrimary: Swift.Bool = false, randomComponent: Swift.String = UUID().uuidString.prefix(8).description)
  final public func displayString() -> Swift.String
  final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.ContactDate> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.ContactDate>)
  @objc deinit
}
extension ContactsManager.ContactDate : SwiftData.PersistentModel {
  public typealias ID = Swift.String
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.ContactDate : Observation.Observable {
}
final public class ContactEmailAddress : Swift.Comparable {
  final public var emailId: Swift.String {
    get
    set
  }
  final public var value: Swift.String? {
    get
    set
  }
  final public var type: Swift.String? {
    get
    set
  }
  final public var emoji: Swift.String? {
    get
    set
  }
  final public var contact: ContactsManager.Contact? {
    get
    set
  }
  public init(contactId: Swift.String?, value: Swift.String?, type: Swift.String?, emoji: Swift.String?, randomComponent: Swift.String? = nil)
  public static func < (lhs: ContactsManager.ContactEmailAddress, rhs: ContactsManager.ContactEmailAddress) -> Swift.Bool
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.ContactEmailAddress> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.ContactEmailAddress>)
  @objc deinit
}
extension ContactsManager.ContactEmailAddress : Swift.CustomDebugStringConvertible {
  final public var debugDescription: Swift.String {
    get
  }
}
extension ContactsManager.ContactEmailAddress : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.ContactEmailAddress {
  public static func create(from item: Contacts.CNLabeledValue<Foundation.NSString>, contactId: Swift.String?) -> ContactsManager.ContactEmailAddress
}
extension ContactsManager.ContactEmailAddress : SwiftData.PersistentModel {
  public typealias ID = SwiftData.PersistentIdentifier
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.ContactEmailAddress : Observation.Observable {
}
final public class ContactInstantMessage : Swift.Comparable {
  final public var instantMessageId: Swift.String {
    get
    set
  }
  final public var service: Swift.String? {
    get
    set
  }
  final public var username: Swift.String? {
    get
    set
  }
  final public var userIdentifier: Swift.String? {
    get
    set
  }
  final public var type: Swift.String? {
    get
    set
  }
  final public var emoji: Swift.String? {
    get
    set
  }
  final public var contact: ContactsManager.Contact? {
    get
    set
  }
  public init(contactId: Swift.String?, service: Swift.String?, username: Swift.String?, userIdentifier: Swift.String?, type: Swift.String?, emoji: Swift.String? = "", randomComponent: Swift.String? = nil)
  public static func < (lhs: ContactsManager.ContactInstantMessage, rhs: ContactsManager.ContactInstantMessage) -> Swift.Bool
  final public func display() -> Swift.String
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.ContactInstantMessage> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.ContactInstantMessage>)
  @objc deinit
}
extension ContactsManager.ContactInstantMessage : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.ContactInstantMessage : SwiftData.PersistentModel {
  public typealias ID = SwiftData.PersistentIdentifier
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.ContactInstantMessage : Observation.Observable {
}
final public class ContactPhoneNumber : Swift.Comparable {
  final public var phoneId: Swift.String {
    get
    set
  }
  final public var value: Swift.String? {
    get
    set
  }
  final public var type: Swift.String? {
    get
    set
  }
  final public var emoji: Swift.String? {
    get
    set
  }
  final public var contact: ContactsManager.Contact? {
    get
    set
  }
  public init(contactId: Swift.String?, value: Swift.String?, type: Swift.String?, emoji: Swift.String?, randomComponent: Swift.String? = nil)
  public static func < (lhs: ContactsManager.ContactPhoneNumber, rhs: ContactsManager.ContactPhoneNumber) -> Swift.Bool
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.ContactPhoneNumber> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.ContactPhoneNumber>)
  @objc deinit
}
extension ContactsManager.ContactPhoneNumber : Swift.CustomDebugStringConvertible {
  final public var debugDescription: Swift.String {
    get
  }
}
extension ContactsManager.ContactPhoneNumber : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.ContactPhoneNumber {
  public static func create(from item: Contacts.CNLabeledValue<Contacts.CNPhoneNumber>, contactId: Swift.String?) -> ContactsManager.ContactPhoneNumber
}
extension ContactsManager.ContactPhoneNumber : SwiftData.PersistentModel {
  public typealias ID = SwiftData.PersistentIdentifier
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.ContactPhoneNumber : Observation.Observable {
}
final public class ContactRelation : Swift.Comparable {
  final public var relationId: Swift.String {
    get
    set
  }
  final public var name: Swift.String? {
    get
    set
  }
  final public var relationType: Swift.String? {
    get
    set
  }
  final public var notes: Swift.String? {
    get
    set
  }
  final public var contact: ContactsManager.Contact? {
    get
    set
  }
  public init(contactId: Swift.String?, name: Swift.String?, relationType: Swift.String?, notes: Swift.String? = nil, randomComponent: Swift.String? = nil)
  public static func < (lhs: ContactsManager.ContactRelation, rhs: ContactsManager.ContactRelation) -> Swift.Bool
  final public func display() -> Swift.String
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.ContactRelation> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.ContactRelation>)
  @objc deinit
}
extension ContactsManager.ContactRelation : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.ContactRelation : SwiftData.PersistentModel {
  public typealias ID = SwiftData.PersistentIdentifier
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.ContactRelation : Observation.Observable {
}
public enum ContactDataRestriction : Swift.String, Swift.CaseIterable {
  case notes
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ContactsManager.ContactDataRestriction]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ContactsManager.ContactDataRestriction] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct ContactsManagerOptions {
  public let restrictedKeysToFetch: Swift.Set<ContactsManager.ContactFieldType>
  public static let `default`: ContactsManager.ContactsManagerOptions
  public init(restrictedKeysToFetch: Swift.Set<ContactsManager.ContactFieldType>)
}
final public class ContactSocial : Swift.Comparable {
  final public var socialId: Swift.String {
    get
    set
  }
  final public var urlString: Swift.String? {
    get
    set
  }
  final public var username: Swift.String? {
    get
    set
  }
  final public var userIdentifier: Swift.String? {
    get
    set
  }
  final public var service: Swift.String? {
    get
    set
  }
  final public var type: Swift.String? {
    get
    set
  }
  final public var emoji: Swift.String? {
    get
    set
  }
  final public var contact: ContactsManager.Contact? {
    get
    set
  }
  public init(contactId: Swift.String?, urlString: Swift.String?, username: Swift.String?, userIdentifier: Swift.String?, service: Swift.String?, type: Swift.String?, emoji: Swift.String? = "", randomComponent: Swift.String? = nil)
  public static func < (lhs: ContactsManager.ContactSocial, rhs: ContactsManager.ContactSocial) -> Swift.Bool
  final public func display() -> Swift.String?
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.ContactSocial> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.ContactSocial>)
  @objc deinit
}
extension ContactsManager.ContactSocial : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.ContactSocial : SwiftData.PersistentModel {
  public typealias ID = SwiftData.PersistentIdentifier
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.ContactSocial : Observation.Observable {
}
public enum SourceType : Swift.String, Swift.Codable {
  case google
  case outlook
  case csv
  case api
  case device
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class ContactSource {
  final public var id: Swift.String {
    get
    set
  }
  final public var name: Swift.String {
    get
    set
  }
  final public var sourceType: Swift.String {
    get
    set
  }
  final public var organizationId: Swift.String {
    get
    set
  }
  final public var canonicalContactId: Swift.String {
    get
    set
  }
  final public var isActive: Swift.Bool {
    get
    set
  }
  final public var lastSyncAt: Swift.Double? {
    get
    set
  }
  final public var syncError: Swift.String? {
    get
    set
  }
  final public var credentialsJSON: Swift.String? {
    get
    set
  }
  final public var settingsJSON: Swift.String? {
    get
    set
  }
  final public var sourceMetadataJSON: Swift.String? {
    get
    set
  }
  final public var createdAt: Swift.Double {
    get
    set
  }
  final public var updatedAt: Swift.Double {
    get
    set
  }
  final public var credentials: [Swift.String : Any]? {
    get
    set
  }
  final public var settings: [Swift.String : Any]? {
    get
    set
  }
  final public var sourceMetadata: [Swift.String : Any]? {
    get
    set
  }
  public init(id: Swift.String = UUID().uuidString, name: Swift.String, sourceType: ContactsManager.SourceType, organizationId: Swift.String = "", canonicalContactId: Swift.String = "")
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.ContactSource> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.ContactSource>)
  @objc deinit
}
extension ContactsManager.ContactSource : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.ContactSource : SwiftData.PersistentModel {
  public typealias ID = Swift.String
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.ContactSource : Observation.Observable {
}
final public class ContactURLAddress : Swift.Comparable {
  final public var urlId: Swift.String {
    get
    set
  }
  final public var value: Swift.String? {
    get
    set
  }
  final public var type: Swift.String? {
    get
    set
  }
  final public var emoji: Swift.String? {
    get
    set
  }
  final public var contact: ContactsManager.Contact? {
    get
    set
  }
  public init(contactId: Swift.String?, value: Swift.String?, type: Swift.String?, emoji: Swift.String?, randomComponent: Swift.String? = nil)
  public static func < (lhs: ContactsManager.ContactURLAddress, rhs: ContactsManager.ContactURLAddress) -> Swift.Bool
  final public var persistentBackingData: any SwiftData.BackingData<ContactsManager.ContactURLAddress> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  public init(backingData: any SwiftData.BackingData<ContactsManager.ContactURLAddress>)
  @objc deinit
}
extension ContactsManager.ContactURLAddress : Swift.CustomDebugStringConvertible {
  final public var debugDescription: Swift.String {
    get
  }
}
extension ContactsManager.ContactURLAddress : Swift.Codable {
  final public func encode(to encoder: any Swift.Encoder) throws
  convenience public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.ContactURLAddress {
  public static func create(from item: Contacts.CNLabeledValue<Foundation.NSString>, contactId: Swift.String?) -> ContactsManager.ContactURLAddress
}
extension ContactsManager.ContactURLAddress : SwiftData.PersistentModel {
  public typealias ID = SwiftData.PersistentIdentifier
  final public var hashValue: Swift.Int {
    get
  }
}
extension ContactsManager.ContactURLAddress : Observation.Observable {
}
public struct DeviceInfo : Swift.Codable {
  public var deviceId: Swift.String
  public var hardwareId: Swift.String
  public var deviceName: Swift.String
  public var deviceModel: Swift.String
  public var deviceManufacturer: Swift.String
  public var deviceModelId: Swift.String
  public var osName: Swift.String
  public var osVersion: Swift.String
  public var screenWidth: Swift.Int
  public var screenHeight: Swift.Int
  public var screenDensity: CoreFoundation.CGFloat
  public var networkType: Swift.String
  public var appVersion: Swift.String
  public var appBuild: Swift.String
  public var appId: Swift.String
  public var locale: Swift.String
  public var timezone: Swift.String
  public var totalMemory: Swift.Int?
  public var cpuCount: Swift.Int?
  public var batteryLevel: Swift.Float?
  public var isCharging: Swift.Bool?
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ContactsManager.DeviceInfo {
  public func asDictionary() -> [Swift.String : Any]
}
public enum APIError : Swift.Error {
  case invalidURL
  case noData
  case decodingError
  case serverError(statusCode: Swift.Int, message: Swift.String)
  case networkError(any Swift.Error)
  case unauthorized
  case tokenExpired
  case unknownError
}
public struct APIResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public let status: Swift.String
  public let message: Swift.String?
  public let data: T?
  public init(from decoder: any Swift.Decoder) throws
}
public class APIClient {
  public static let shared: ContactsManager.APIClient
  public init(userId: Swift.String, deviceInfo: ContactsManager.DeviceInfo? = nil)
  public func setContactSyncManager(_ manager: ContactsManager.ContactSyncManager)
  public func refreshToken() async throws -> Swift.String
  public func createContactSource(name: Swift.String, sourceType: ContactsManager.SourceType) async throws -> ContactsManager.ContactSource
  public func syncContacts(contacts: [ContactsManager.Contact], skipDuplicates: Swift.Bool = true) async throws -> Swift.Int
  public func getUserInfo() async throws -> [Swift.String : Any]
  public func get<T>(endpoint: Swift.String, parameters: [Swift.String : Swift.String]? = nil, requiresAuth: Swift.Bool = true) async throws -> T where T : Swift.Decodable
  public func post<T>(endpoint: Swift.String, body: any Swift.Encodable, parameters: [Swift.String : Swift.String]? = nil, requiresAuth: Swift.Bool = true) async throws -> T where T : Swift.Decodable
  public func put<T>(endpoint: Swift.String, body: any Swift.Encodable, parameters: [Swift.String : Swift.String]? = nil, requiresAuth: Swift.Bool = true) async throws -> T where T : Swift.Decodable
  public func delete<T>(endpoint: Swift.String, parameters: [Swift.String : Swift.String]? = nil, requiresAuth: Swift.Bool = true) async throws -> T where T : Swift.Decodable
  @objc deinit
}
extension ContactsManager.APIClient {
  public static func validateAPIKey(_ apiKey: Swift.String) async throws -> Swift.Bool
}
public enum RuntimeEnvironment : Swift.String {
  case development
  case staging
  case production
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct APIConfig {
  public static var environment: ContactsManager.RuntimeEnvironment
  public static var baseURL: Foundation.URL {
    get
  }
  public static let apiVersion: Swift.String
  public static let tokenEndpoint: Swift.String
  public static let contactsEndpoint: Swift.String
  public static let contactsSyncEndpoint: Swift.String
  public static let contactSourceEndpoint: Swift.String
  public static let contactSourcesEndpoint: Swift.String
  public static let userInfoEndpoint: Swift.String
  public static let recommendContactsToInviteEndpoint: Swift.String
  public static let nearbyContactsEndpoint: Swift.String
  public static let appUserContactsEndpoint: Swift.String
  public static let validateAPIKeyEndpoint: Swift.String
  public static let defaultTimeout: Swift.Double
  public static let uploadTimeout: Swift.Double
  public static let maxContactsPerBatch: Swift.Int
  public static let websiteURL: Swift.String
  public static func configure(environment: ContactsManager.RuntimeEnvironment)
}
public class ContactSyncManager {
  public enum ContactSourceError : Swift.Error, Foundation.LocalizedError {
    case saveFailure(any Swift.Error)
    case retrievalFailure(Swift.String)
    case sourceNotFound
    case jsonEncodingFailure
    case jsonDecodingFailure
    public var errorDescription: Swift.String? {
      get
    }
  }
  public init(userId: Swift.String, sourceIdentifier: Swift.String, modelContext: SwiftData.ModelContext, deviceInfo: ContactsManager.DeviceInfo? = nil, batchSize: Swift.Int = APIConfig.maxContactsPerBatch)
  public func registerBackgroundTasks()
  public func syncContacts() async throws -> Swift.Int
  public func syncContacts(completion: @escaping (Swift.Result<Swift.Int, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension ContactsManager.ContactSyncManager {
  public enum SyncError : Swift.Error {
    case alreadyRunning
    case contextSaveError
    case sourceNotRegistered
    public var localizedDescription: Swift.String {
      get
    }
    public static func == (a: ContactsManager.ContactSyncManager.SyncError, b: ContactsManager.ContactSyncManager.SyncError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension ContactsManager.ContactSyncManager {
  public func scheduleBackgroundSync()
  public func startSyncTask() async throws -> Swift.Int
  public func cancelSync()
}
public protocol ContactDatabaseContainer {
  var mainContext: SwiftData.ModelContext { get }
}
extension SwiftData.ModelContainer : ContactsManager.ContactDatabaseContainer {
}
public enum ContactsAccessStatus : Swift.Equatable {
  case notDetermined
  case authorized
  case limitedAuthorized
  case denied
  case restricted
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ContactsManager.ContactsAccessStatus, b: ContactsManager.ContactsAccessStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor final public class ContactSearchService {
  @_Concurrency.MainActor public static let shared: ContactsManager.ContactSearchService
  @_Concurrency.MainActor final public func initialize(with container: any ContactsManager.ContactDatabaseContainer)
  @_Concurrency.MainActor final public func getTotalContactsCount() async throws -> Swift.Int
  @_Concurrency.MainActor final public func searchContacts(query: Swift.String, searchFields: Swift.Set<ContactsManager.ContactSearchService.SearchField> = Set(SearchField.allCases), offset: Swift.Int = 0, limit: Swift.Int = 50) async throws -> [ContactsManager.Contact]
  @_Concurrency.MainActor final public func quickSearch(_ query: Swift.String) async throws -> [ContactsManager.Contact]
  public enum SearchField : Swift.CaseIterable {
    case name
    case email
    case phone
    case address
    case organization
    case notes
    public static func == (a: ContactsManager.ContactSearchService.SearchField, b: ContactsManager.ContactSearchService.SearchField) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [ContactsManager.ContactSearchService.SearchField]
    nonisolated public static var allCases: [ContactsManager.ContactSearchService.SearchField] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
public enum ContactsManagerEvent : Swift.String {
  case appDidBecomeActive
  case appDidEnterBackground
  case contactStoreDidChange
  case appWasTerminated
  case contactsAccessChanged
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias EventHandler = () -> Swift.Void
@_hasMissingDesignatedInitializers final public class EventWrapperService : Foundation.ObservableObject {
  public static let shared: ContactsManager.EventWrapperService
  final public func subscribe(to event: ContactsManager.ContactsManagerEvent, identifier: Swift.String, handler: @escaping ContactsManager.EventHandler)
  final public func unsubscribe(from event: ContactsManager.ContactsManagerEvent, identifier: Swift.String)
  final public func startObserving()
  final public func stopObserving()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension ContactsManager.ContactsManagerEvent : Swift.CaseIterable {
  public typealias AllCases = [ContactsManager.ContactsManagerEvent]
  nonisolated public static var allCases: [ContactsManager.ContactsManagerEvent] {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func onContactsManagerEvent(_ event: ContactsManager.ContactsManagerEvent, identifier: Swift.String, perform action: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
public enum ContactSelectionMode {
  case single
  case multiple
  public static func == (a: ContactsManager.ContactSelectionMode, b: ContactsManager.ContactSelectionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ContactFieldType {
  case notes
  case phone
  case email
  case any
  public static func == (a: ContactsManager.ContactFieldType, b: ContactsManager.ContactFieldType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ContactSelectionOptions {
  public let selectionMode: ContactsManager.ContactSelectionMode
  public let fieldType: ContactsManager.ContactFieldType
  public let maxSelectionCount: Swift.Int?
  public init(selectionMode: ContactsManager.ContactSelectionMode = .single, fieldType: ContactsManager.ContactFieldType = .any, maxSelectionCount: Swift.Int? = nil)
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class ContactsManagerUI {
  public static func getInstance() -> ContactsManager.ContactsManagerUI
  public func searchContacts(from viewController: UIKit.UIViewController, options: ContactsManager.ContactSelectionOptions, completion: @escaping (Swift.Result<[ContactsManager.Contact], any Swift.Error>) -> Swift.Void)
  @objc deinit
}
public enum ContactsServiceError : Foundation.LocalizedError {
  case invalidAPIKey
  case apiKeyValidationFailed(Swift.String)
  case networkError(any Swift.Error)
  case initializationFailed(any Swift.Error)
  case databaseError(any Swift.Error)
  case notInitialized
  case contactsAccessDenied
  case userNotAuthenticated
  case customError(Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class ContactsService {
  public static let shared: ContactsManager.ContactsService
  final public func initialize(withAPIKey apiKey: Swift.String, userId: Swift.String, options: ContactsManager.ContactsManagerOptions = .default) async throws
  final public var isInitialized: Swift.Bool {
    get
  }
  final public var currentState: Swift.String {
    get
  }
  final public func reset() async throws
  final public var settingsAlert: some SwiftUICore.View {
    get
  }
  @objc deinit
}
extension ContactsManager.ContactsService {
  final public var databaseContainer: (any ContactsManager.ContactDatabaseContainer)? {
    get
  }
}
extension ContactsManager.ContactsService {
  final public func fetchContacts(fieldType: ContactsManager.ContactFieldType) async throws -> [ContactsManager.Contact]
  final public func fetchContact(withId id: Swift.String) async throws -> ContactsManager.Contact?
}
extension ContactsManager.ContactsService {
  final public func requestContactsAccess() async -> Swift.Bool
  final public var contactsAccessStatus: ContactsManager.ContactsAccessStatus {
    get
  }
}
extension ContactsManager.ContactsService {
  final public func getRecommendedContactsToInvite(limit: Swift.Int = 30) async throws -> [ContactsManager.ContactRecommendation]
  final public func getNearbyContacts(latitude: Swift.Double, longitude: Swift.Double, radiusInKm: Swift.Double = 10, limit: Swift.Int = 30) async throws -> [ContactsManager.ContactRecommendation]
  final public func getContactsUsingApp(limit: Swift.Int = 30) async throws -> [ContactsManager.ContactRecommendation]
}
public enum RecommendationType {
  case inviteRecommendations
  case nearbyContacts
  case appUsers
  public static func == (a: ContactsManager.RecommendationType, b: ContactsManager.RecommendationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ContactRecommendation {
  public let contact: ContactsManager.Contact
  public let score: Swift.Double
  public let reason: Swift.String
  public let type: ContactsManager.RecommendationType
}
extension ContactsManager.ContactDataRestriction : Swift.Equatable {}
extension ContactsManager.ContactDataRestriction : Swift.Hashable {}
extension ContactsManager.ContactDataRestriction : Swift.RawRepresentable {}
extension ContactsManager.SourceType : Swift.Equatable {}
extension ContactsManager.SourceType : Swift.Hashable {}
extension ContactsManager.SourceType : Swift.RawRepresentable {}
extension ContactsManager.RuntimeEnvironment : Swift.Equatable {}
extension ContactsManager.RuntimeEnvironment : Swift.Hashable {}
extension ContactsManager.RuntimeEnvironment : Swift.RawRepresentable {}
extension ContactsManager.ContactSyncManager.SyncError : Swift.Equatable {}
extension ContactsManager.ContactSyncManager.SyncError : Swift.Hashable {}
extension ContactsManager.ContactsAccessStatus : Swift.Hashable {}
extension ContactsManager.ContactSearchService : Swift.Sendable {}
extension ContactsManager.ContactSearchService.SearchField : Swift.Equatable {}
extension ContactsManager.ContactSearchService.SearchField : Swift.Hashable {}
extension ContactsManager.ContactsManagerEvent : Swift.Equatable {}
extension ContactsManager.ContactsManagerEvent : Swift.Hashable {}
extension ContactsManager.ContactsManagerEvent : Swift.RawRepresentable {}
extension ContactsManager.ContactSelectionMode : Swift.Equatable {}
extension ContactsManager.ContactSelectionMode : Swift.Hashable {}
extension ContactsManager.ContactFieldType : Swift.Equatable {}
extension ContactsManager.ContactFieldType : Swift.Hashable {}
extension ContactsManager.RecommendationType : Swift.Equatable {}
extension ContactsManager.RecommendationType : Swift.Hashable {}
